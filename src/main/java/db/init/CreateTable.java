package db.init;

import db.ConnectSql;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

public class CreateTable {
    public ArrayList<String> table = new ArrayList();
 public static boolean st=false;


    public CreateTable() {
        table.add("USER");
        table.add("CUSTOMER");
        table.add("MECHANIC");
        table.add("ORDER1");
      //  table.add("STATUS");

// создаемм таблицу
        for (String s : table) {
            try {
                System.out.println(s);
                if (!st)
                ConnectBase(s);
            } catch (Exception e) {
                System.out.println(" \nCreateTable:  Неудалось проверить наличе таблиц вбазе" + "       \n" + e);
            }
        }

        // заполняем  таблицу
        for (String s : table) {
            try {
                if (!st){
                System.out.println(s);

                SetDateBase(s);}
            } catch (Exception e) {
                System.out.println("\nCreateTable:  Неудалось заполнить таблцу " + s + "       \n" + e);
            }
        }


    }


    // поключаемся к базе и роверяем наличие таблиц? если таблицы нет создаем
    private void ConnectBase(String tablName) throws SQLException, ClassNotFoundException {


        Connection conn = ConnectSql.getMySQLConnection();
        //  System.out.println("Соединение с СУБД выполнено main.ddd" + conn);
        Statement stmnt = conn.createStatement();
        try {
            ResultSet res = (ResultSet) stmnt.executeQuery("select * from " + tablName + ";");
            //res = stmnt.executeQuery(res);

            System.out.println("ConnectBase:  Таблица " + tablName + " уже создана");

        } catch (SQLException exc) {
            System.out.println(" \nConnectBase:  Таблица  " + tablName + "  не создана " + "        \n" + exc);
            String sql = "";

            if (tablName.equals("USER")) {
                sql = "CREATE TABLE USER (    \n" +
                        "ID  BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,    \n" +
                        "NAME VARCHAR(50) NOT NULL,    \n" +
                        "SURNAME VARCHAR(50) NOT NULL,  \n" +
                        "FNAME VARCHAR(50) NOT NULL,  \n" +
                        "ROLE VARCHAR(50) NOT NULL);";

            }
            if (tablName.equals("CUSTOMER")) {
                sql = "CREATE TABLE CUSTOMER (    \n" +
                        "IDC  BIGINT REFERENCES USER (ID) ON DELETE CASCADE,    \n" +
                        "PHONEC VARCHAR(50));";


                //System.out.println(sql);
            }

            if (tablName.equals("MECHANIC")) {
                sql = "CREATE TABLE MECHANIC (\n" +
                        " IDM BIGINT REFERENCES USER (ID) ON DELETE CASCADE,\n" +
                        " HPRICE integer);";


                //System.out.println(sql);
            }

            if (tablName.equals("ORDER1")) {
                sql = "CREATE TABLE ORDER1 (    \n" +
                        "       IDO  BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,   \n" +
                        "        IDM BIGINT REFERENCES USER (ID) ON DELETE CASCADE, \n" +
                        "        IDC BIGINT REFERENCES USER (ID) ON DELETE SET NULL,    \n" +
                        "        DESCRIPTION VARCHAR(250) NOT NULL, \n" +
                        "        DATECR timestamp  NOT NULL, /*дата создания  запланировано*/  \n" +
                       // "        DATEPLAN timestamp  NOT NULL, /*Запланировано*/    \n" +
                        "        DATEFIN timestamp  ,   /*  выполнено*/ \n" +
                        "        STATUSO VARCHAR(50)  , /*  Статус*/   \n" +
                        "        COST double precision)";


            /*"CREATE TABLE ORDER1 (  \n" +
                        "    IDO  BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,\n" +
                        "    IDM BIGINT REFERENCES USER (ID) ON DELETE CASCADE,\n" +
                        "    IDC BIGINT REFERENCES USER (ID) ON DELETE SET NULL,\n" +
                        "    DESCRIPTION VARCHAR(250) NOT NULL,\n" +
                        "    DATECR timestamp  NOT NULL,\n" +
                        "    DATEFIN timestamp  ,\n" +
                        "    COST double precision) ;";*/
               // System.out.println(sql);
            }

           // if (tablName.equals("STATUS")) {
               /* sql = "CREATE TABLE STATUS (\n" +
                        "                      IDO  BIGINT REFERENCES ORDER1 (IDO) ON DELETE CASCADE,\n" +
                        "                      STATUS VARCHAR(50) NOT NULL,\n" +
                        "                      DATETIME DATETIME NOT NULL);";
*/
         //   }


            stmnt.executeUpdate(sql);
            System.out.println("ConnectBase:  Создали таблицу " + tablName + "       \n");
        }

        conn.close();
        System.out.println(" \nConnectBase:  Закрыли соединение создания таблицы (" + tablName + ")!");
    }

    // заполняем таблицу данными
    private void SetDateBase(String s) throws SQLException, ClassNotFoundException {
        Connection conn = ConnectSql.getMySQLConnection();
        //   System.out.println("Соединение с СУБД выполнено main.ddd" + conn);
        Statement stmnt = conn.createStatement();


        try {
            ResultSet res = (ResultSet) stmnt.executeQuery("select count(*) countZ from " + s + "");
            int i = 0;
            while (res.next()) {
                i = res.getInt("countZ");
                System.out.println("SetDateBase:  Сколько записей в таблице  " + s + "    count=" + i);

            }


            if (i == 0) {

                if (s.equals("USER")) {
                    stmnt.executeUpdate("INSERT into USER (NAME,SURNAME,FNAME,ROLE) values ('Иван','Иванов','Иванович','клиент')");
                    stmnt.executeUpdate("INSERT into USER (NAME,SURNAME,FNAME,ROLE) values ('Петр','Петров','Петрович','клиент')");
                    stmnt.executeUpdate("INSERT into USER (NAME,SURNAME,FNAME,ROLE) values ('Павел','Павлов','Павлович','клиент')");

                    stmnt.executeUpdate("INSERT into USER (NAME,SURNAME,FNAME,ROLE) values ('Игорь','Игоревич','Игорев','механик')");
                    stmnt.executeUpdate("INSERT into USER (NAME,SURNAME,FNAME,ROLE) values ('Владимир','Петров','Владимирович','механик')");
                    stmnt.executeUpdate("INSERT into USER (NAME,SURNAME,FNAME,ROLE) values ('Николай','Иванычев','Николаич','механик')");

                }
                if (s.equals("CUSTOMER")) {
                    stmnt.executeUpdate("INSERT into CUSTOMER (IDC,PHONEC) values (0,'+79123546733')");
                    stmnt.executeUpdate("INSERT into CUSTOMER (IDC,PHONEC) values (1,'203040')");
                    stmnt.executeUpdate("INSERT into CUSTOMER (IDC,PHONEC) values (2,'89178542899')");

                    //    stmnt.executeUpdate("");

                }
                if (s.equals("MECHANIC")) {
                    stmnt.executeUpdate("INSERT into MECHANIC (IDM,HPRICE) values (4,50)");
                    stmnt.executeUpdate("INSERT into MECHANIC (IDM,HPRICE) values (5,150)");
                    stmnt.executeUpdate("INSERT into MECHANIC (IDM,HPRICE) values (3,70)");
                }
                if (s.equals("ORDER1")) {
                    stmnt.executeUpdate("INSERT into ORDER1 (IDM,IDC,DESCRIPTION,DATECR,DATEFIN,STATUSO,COST)   \n" +
                            "values (4,1,'поменять колесо',sysdate,DATE_ADD(sysdate, +1), 'Выполнен' ,1140);");

                    stmnt.executeUpdate("INSERT into ORDER1 (IDM,IDC,DESCRIPTION,DATECR,DATEFIN,STATUSO,COST)   \n" +
                            "values (3,2,'Выпрямить дверь',sysdate,null, 'Запланирован' ,114)");
                   // stmnt.executeUpdate("INSERT into ORDER1 (IDM,IDC,DESCRIPTION,DATECR,COST) values (4,2,'покрасить бампер',sysdate,70)");
                   // stmnt.executeUpdate("INSERT into ORDER1 (IDM,IDC,DESCRIPTION,DATECR,COST) values (3,1,'что то стучит',sysdate,140)");
                }

              /*  if (s.equals("STATUS")) {
                    stmnt.executeUpdate("INSERT into STATUS (IDO,STATUS,DATETIME) values (0,'Запланирован',DATE_ADD(sysdate, +1) )");
                    sleep(1000);
                    stmnt.executeUpdate("INSERT into STATUS (IDO,STATUS,DATETIME) values (0,'Выполнен',DATE_ADD(sysdate, +2) )");
                    sleep(7000);
                    stmnt.executeUpdate("INSERT into STATUS (IDO,STATUS,DATETIME) values (0,'Принят_клиентом',DATE_ADD(sysdate, +2))");
                    sleep(1000);
                    stmnt.executeUpdate("INSERT into STATUS (IDO,STATUS,DATETIME) values (1,'Запланирован',DATE_ADD(sysdate, +4))");
                }*/

            }


        } catch (SQLException exc) {
            System.out.println(exc + "      В таблицу небыли добавлены записи");
        }

        conn.close();
    }
}